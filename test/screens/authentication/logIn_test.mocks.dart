// Mocks generated by Mockito 5.1.0 from annotations
// in bicycle_hire_app/test/screens/authentication/logIn_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:ui' as _i4;

import 'package:bicycle_hire_app/services/globals.dart' as _i3;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeValueNotifier_0<T> extends _i1.Fake implements _i2.ValueNotifier<T> {
}

/// A class which mocks [GlobalFunctions].
///
/// See the documentation for Mockito's code generation for more information.
class MockglobalFunctions extends _i1.Mock implements _i3.GlobalFunctions {
  MockglobalFunctions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueNotifier<bool> get show => (super.noSuchMethod(
      Invocation.getter(#show),
      returnValue: _FakeValueNotifier_0<bool>()) as _i2.ValueNotifier<bool>);
  @override
  _i2.ValueNotifier<bool> get loading => (super.noSuchMethod(
      Invocation.getter(#loading),
      returnValue: _FakeValueNotifier_0<bool>()) as _i2.ValueNotifier<bool>);
  @override
  List<_i4.Color> get appBarColour =>
      (super.noSuchMethod(Invocation.getter(#appBarColour),
          returnValue: <_i4.Color>[]) as List<_i4.Color>);
  @override
  set appBarColour(List<_i4.Color>? _appBarColour) =>
      super.noSuchMethod(Invocation.setter(#appBarColour, _appBarColour),
          returnValueForMissingStub: null);
  @override
  List<_i4.Color> get titleColour =>
      (super.noSuchMethod(Invocation.getter(#titleColour),
          returnValue: <_i4.Color>[]) as List<_i4.Color>);
  @override
  set titleColour(List<_i4.Color>? _titleColour) =>
      super.noSuchMethod(Invocation.setter(#titleColour, _titleColour),
          returnValueForMissingStub: null);
  @override
  List<_i4.Color> get textColour =>
      (super.noSuchMethod(Invocation.getter(#textColour),
          returnValue: <_i4.Color>[]) as List<_i4.Color>);
  @override
  set textColour(List<_i4.Color>? _textColour) =>
      super.noSuchMethod(Invocation.setter(#textColour, _textColour),
          returnValueForMissingStub: null);
  @override
  _i5.Future<int> getTheme() =>
      (super.noSuchMethod(Invocation.method(#getTheme, []),
          returnValue: Future<int>.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<bool> getIsNewUser() =>
      (super.noSuchMethod(Invocation.method(#getIsNewUser, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}
